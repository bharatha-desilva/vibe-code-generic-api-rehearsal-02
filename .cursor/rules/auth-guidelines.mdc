---
alwaysApply: true
---

# API Guidelines

## Authentication Endpoints

This document outlines the authentication endpoints for the API, working with the `users` collection.
For the moment check password in plain-text, no-ecription or hashing.

### Base URL
All authentication endpoints are prefixed with `/auth`

### Endpoints

#### 1. Login
**POST** `/auth/login`

Authenticates a user and returns authentication tokens.
If valid → return the user object with `_id` as string and set an HttpOnly cookie.

**Request Body:**
```json
{
  "username": "user",
  "password": "userpassword"
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "user": {
      "id": "user_id",
      "email": "user@example.com",
      "username": "User Name",
      "role": "user"
    },
    "tokens": {
      "access_token": "jwt_access_token",
      "refresh_token": "jwt_refresh_token",
      "expires_in": 3600
    }
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid credentials",
  "error": "INVALID_CREDENTIALS"
}
```

#### 2. Logout
**POST** `/auth/logout`

Invalidates the current user session and tokens.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Request Body:**
```json
{
  "refresh_token": "jwt_refresh_token"
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Logout successful"
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "error": "INVALID_TOKEN"
}
```

#### 3. Profile
**GET** `/auth/profile`

Retrieves the current authenticated user's profile information.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Profile retrieved successfully",
  "data": {
    "user": {
      "id": "user_id",
      "email": "user@example.com",
      "username": "User Name",
      "role": "user",
      "created_at": "2024-01-01T00:00:00Z",
      "updated_at": "2024-01-01T00:00:00Z",
      "last_login": "2024-01-01T00:00:00Z"
    }
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "error": "INVALID_TOKEN"
}
```

#### 4. Validate
**GET** `/auth/validate`

Validates the current authentication token and returns token status.
If valid → return the user object with `_id` as string and set an HttpOnly cookie.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Token is valid",
  "data": {
    "valid": true,
    "user_id": "user_id",
    "expires_at": "2024-01-01T01:00:00Z",
    "token_type": "access_token"
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "data": {
    "valid": false,
    "error": "TOKEN_EXPIRED"
  }
}
```

### Error Codes

| Error Code | Description |
|------------|-------------|
| `INVALID_CREDENTIALS` | Email or password is incorrect |
| `INVALID_TOKEN` | Token is invalid, malformed, or expired |
| `TOKEN_EXPIRED` | Token has expired |
| `USER_NOT_FOUND` | User does not exist in the users collection |
| `ACCOUNT_DISABLED` | User account has been disabled |

### Authentication Flow

1. **Login**: User provides credentials to `/auth/login`
2. **Token Usage**: Include access token in `Authorization` header for protected routes
3. **Token Validation**: Use `/auth/validate` to check token status
4. **Profile Access**: Get user information via `/auth/profile`
5. **Logout**: Invalidate tokens using `/auth/logout`

### Security Notes

- All authentication endpoints should use HTTPS in production
- Access tokens should have a short expiration time (e.g., 15-60 minutes)
- Refresh tokens should be stored securely and have longer expiration
- Implement rate limiting on login attempts
- Log authentication events for security monitoring
- Passwords should be hashed using bcrypt or similar
- Consider implementing 2FA for enhanced security
- If valid → return the user object with `_id` as string and set an HttpOnly cookie.

### Database Collection: `users`

The authentication system works with a `users` collection containing user account information:

```json
{
  "_id": "ObjectId",
  "email": "string (unique)",
  "password": "string (hashed)",
  "username": "string",
  "role": "string",
  "created_at": "Date",
  "updated_at": "Date",
  "last_login": "Date",
  "is_active": "boolean",
  "email_verified": "boolean"
}
```# API Guidelines

## Authentication Endpoints

This document outlines the authentication endpoints for the API, working with the `users` collection.

### Base URL
All authentication endpoints are prefixed with `/auth`

### Endpoints

#### 1. Login
**POST** `/auth/login`

Authenticates a user and returns authentication tokens.
If valid → return the user object with `_id` as string and set an HttpOnly cookie.

**Request Body:**
```json
{
  "username": "user@example.com",
  "password": "userpassword"
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "user": {
      "id": "user_id",
      "email": "user@example.com",
      "username": "User Name",
      "role": "user"
    },
    "tokens": {
      "access_token": "jwt_access_token",
      "refresh_token": "jwt_refresh_token",
      "expires_in": 3600
    }
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid credentials",
  "error": "INVALID_CREDENTIALS"
}
```

#### 2. Logout
**POST** `/auth/logout`

Invalidates the current user session and tokens.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Request Body:**
```json
{
  "refresh_token": "jwt_refresh_token"
}
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Logout successful"
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "error": "INVALID_TOKEN"
}
```

#### 3. Profile
**GET** `/auth/profile`

Retrieves the current authenticated user's profile information.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Profile retrieved successfully",
  "data": {
    "user": {
      "id": "user_id",
      "email": "user@example.com",
      "username": "User Name",
      "role": "user",
      "created_at": "2024-01-01T00:00:00Z",
      "updated_at": "2024-01-01T00:00:00Z",
      "last_login": "2024-01-01T00:00:00Z"
    }
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "error": "INVALID_TOKEN"
}
```

#### 4. Validate
**GET** `/auth/validate`

Validates the current authentication token and returns token status.
If valid → return the user object with `_id` as string and set an HttpOnly cookie.

**Headers:**
```
Authorization: Bearer <access_token>
```

**Response (Success - 200):**
```json
{
  "success": true,
  "message": "Token is valid",
  "data": {
    "valid": true,
    "user_id": "user_id",
    "expires_at": "2024-01-01T01:00:00Z",
    "token_type": "access_token"
  }
}
```

**Response (Error - 401):**
```json
{
  "success": false,
  "message": "Invalid or expired token",
  "data": {
    "valid": false,
    "error": "TOKEN_EXPIRED"
  }
}
```

### Error Codes

| Error Code | Description |
|------------|-------------|
| `INVALID_CREDENTIALS` | Email or password is incorrect |
| `INVALID_TOKEN` | Token is invalid, malformed, or expired |
| `TOKEN_EXPIRED` | Token has expired |
| `USER_NOT_FOUND` | User does not exist in the users collection |
| `ACCOUNT_DISABLED` | User account has been disabled |

### Authentication Flow

1. **Login**: User provides credentials to `/auth/login`
2. **Token Usage**: Include access token in `Authorization` header for protected routes
3. **Token Validation**: Use `/auth/validate` to check token status
4. **Profile Access**: Get user information via `/auth/profile`
5. **Logout**: Invalidate tokens using `/auth/logout`

### Security Notes

- All authentication endpoints should use HTTPS in production
- Access tokens should have a short expiration time (e.g., 15-60 minutes)
- Refresh tokens should be stored securely and have longer expiration
- Implement rate limiting on login attempts
- Log authentication events for security monitoring
- Passwords should be hashed using bcrypt or similar
- Consider implementing 2FA for enhanced security
- If valid → return the user object with `_id` as string and set an HttpOnly cookie.

### Database Collection: `users`

The authentication system works with a `users` collection containing user account information:

```json
{
  "_id": "ObjectId",
  "email": "string (unique)",
  "password": "string (hashed)",
  "username": "string",
  "role": "string",
  "created_at": "Date",
  "updated_at": "Date",
  "last_login": "Date",
  "is_active": "boolean",
  "email_verified": "boolean"
}
```